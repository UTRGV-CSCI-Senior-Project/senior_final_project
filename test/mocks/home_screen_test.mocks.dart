// Mocks generated by Mockito 5.4.4 from annotations
// in folio/test/views/home/home_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:folio/controller/user_location_controller.dart' as _i3;
import 'package:geolocator/geolocator.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePosition_0 extends _i1.SmartFake implements _i2.Position {
  _FakePosition_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i1.Mock implements _i3.LocationService {
  MockLocationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> checkService() => (super.noSuchMethod(
        Invocation.method(
          #checkService,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> checkPermission() => (super.noSuchMethod(
        Invocation.method(
          #checkPermission,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i2.Position> getCurrentLocation() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentLocation,
          [],
        ),
        returnValue: _i4.Future<_i2.Position>.value(_FakePosition_0(
          this,
          Invocation.method(
            #getCurrentLocation,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Position>);

  @override
  _i4.Future<List<double>> getCurrentLatiLong() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentLatiLong,
          [],
        ),
        returnValue: _i4.Future<List<double>>.value(<double>[]),
      ) as _i4.Future<List<double>>);

  @override
  double calculateDistanceInMiles(
    _i2.Position? p1,
    _i2.Position? p2,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateDistanceInMiles,
          [
            p1,
            p2,
          ],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  _i4.Future<String> getAddress(
    double? latitude,
    double? longitude,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAddress,
          [
            latitude,
            longitude,
          ],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #getAddress,
            [
              latitude,
              longitude,
            ],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<String> getCity(
    double? latitude,
    double? longitude,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCity,
          [
            latitude,
            longitude,
          ],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #getCity,
            [
              latitude,
              longitude,
            ],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<String> getCurrentCity() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentCity,
          [],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #getCurrentCity,
            [],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  String createGeohash(
    double? latitude,
    double? longitude,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createGeohash,
          [
            latitude,
            longitude,
          ],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #createGeohash,
            [
              latitude,
              longitude,
            ],
          ),
        ),
      ) as String);

  @override
  _i4.Future<void> openLocationSettings() => (super.noSuchMethod(
        Invocation.method(
          #openLocationSettings,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Stream<_i2.Position> getPositionStream() => (super.noSuchMethod(
        Invocation.method(
          #getPositionStream,
          [],
        ),
        returnValue: _i4.Stream<_i2.Position>.empty(),
      ) as _i4.Stream<_i2.Position>);
}

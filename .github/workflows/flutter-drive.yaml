# Name of the workflow
name: Unit and Integration tests
# This work flow is triggered when pull requests are opened or updated
on: [pull_request]
# A workflow run is made up of one or more jobs.
jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repository
        uses: actions/checkout@v4

      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          cache: true

      - name: Write firebase_options.dart
        run: echo '${{ secrets.FIREBASE_OPTIONS }}' > lib/firebase_options.dart

      - name: Run Unit Tests
        run: flutter test

  android-integration-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repository
        uses: actions/checkout@v4

      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          cache: true
      - name: Enabling KVM -1
        uses: DeterminateSystems/nix-installer-action@main

      - name: Enabling KVM -2
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}

      - name: Write firebase_options.dart
        run: echo '${{ secrets.FIREBASE_OPTIONS }}' > lib/firebase_options.dart
      - name: Write GoogleService-info.plist
        run: echo '${{ secrets.GOOGLE_SERVICE_INFO_PLIST }}' > ios/Runner/GoogleService-Info.plist
      - name: Write google-services.json
        run: echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > android/app/google-services.json
      - name: Write firebase.json
        run: echo '${{ secrets.FIREBASE_JSON }}' > firebase.json

      - name: Install firebase tools
        run: npm install -g firebase-tools

      - name: Authenticate firebase
        run: firebase use --token '${{ secrets.FIREBASE_TOKEN }}'

      - name: Get Flutter Dependencies
        run: flutter pub get

      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 23
          arch: x86_64
          profile: pixel_3a
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Run Integration Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 23
          arch: x86_64
          profile: pixel_3a
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          emulator-boot-timeout: 2000
          script: firebase emulators:exec "flutter test integration_test --timeout none" --import=./data

  iphone-integration-tests:
    runs-on: macOS-latest
    steps:
      - name: Clone Repository
        uses: actions/checkout@v4

      - name: Erase all simulators
        run: xcrun simctl erase all

      - name: Shutdown all simulators
        run: xcrun simctl shutdown all

      - name: Clean Xcode Derived Data
        run: rm -rf ~/Library/Developer/Xcode/DerivedData/*

      - name: Clean Xcode cache
        run: rm -rf ~/Library/Caches/com.apple.dt.Xcode/*

      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          cache: true

      - name: Write firebase_options.dart
        run: echo '${{ secrets.FIREBASE_OPTIONS }}' > lib/firebase_options.dart
      - name: Write GoogleService-info.plist
        run: echo '${{ secrets.GOOGLE_SERVICE_INFO_PLIST }}' > ios/Runner/GoogleService-Info.plist
      - name: Write google-services.json
        run: echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > android/app/google-services.json
      - name: Write firebase.json
        run: echo '${{ secrets.FIREBASE_JSON }}' > firebase.json

      - name: Install firebase tools
        run: npm install -g firebase-tools

      - name: Authenticate firebase
        run: firebase use --token '${{ secrets.FIREBASE_TOKEN }}'

      - name: "Set up simulator"
        uses: futureware-tech/simulator-action@v4
        with:
          model: "iPhone 14"
          os_version: ">=13.0"
          wait_for_boot: true
      - name: Clean and Get Flutter Dependencies
        run: |
          flutter clean
          flutter pub get
      - name: Pod Install
        run: |
          cd ios
          pod install --verbose
          cd ..
      - name: "Run Integration Tests"
        timeout-minutes: 50
        run: firebase emulators:exec --token "${{ secrets.FIREBASE_TOKEN }}" "flutter test integration_test --timeout none" --import=./data
